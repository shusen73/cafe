package router

import (
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"cafe/handlers"
	"cafe/middleware"
	"github.com/gin-gonic/gin"
)

func Setup() *gin.Engine {
	r := gin.Default()

	// Health check
	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"ok": true})
	})

	// API routes
	api := r.Group("/api")
	{
		// Auth
		api.POST("/auth/register", handlers.Register)
		api.POST("/auth/login", handlers.Login)

		// Public menu
		api.GET("/menu", handlers.GetMenu)

		// Admin-protected menu mutations
		admin := api.Group("/")
		admin.Use(middleware.AdminOnly())
		{
			admin.POST("/menu", handlers.CreateMenu)
			admin.PUT("/menu/:id", handlers.UpdateMenu)
			admin.DELETE("/menu/:id", handlers.DeleteMenu)
		}
	}

	// Static assets generated by Vite
	r.Static("/assets", "./public/assets")

	// Serve favicon if present
	r.GET("/favicon.ico", func(c *gin.Context) {
		if _, err := os.Stat("./public/favicon.ico"); err == nil {
			c.File("./public/favicon.ico")
			return
		}
		c.Status(http.StatusNoContent)
	})

	// Root and SPA fallback (but never for /api/*)
	r.GET("/", serveIndex)
	r.NoRoute(func(c *gin.Context) {
		p := c.Request.URL.Path
		if strings.HasPrefix(p, "/api/") {
			c.JSON(http.StatusNotFound, gin.H{"error": "not found"})
			return
		}
		full := filepath.Join("./public", filepath.Clean(p))
		if fi, err := os.Stat(full); err == nil && !fi.IsDir() {
			c.File(full)
			return
		}
		serveIndex(c)
	})

	return r
}

func serveIndex(c *gin.Context) {
	if _, err := os.Stat("./public/index.html"); err == nil {
		c.File("./public/index.html")
		return
	}
	c.String(http.StatusOK, "Build not found. Run `npm run build` in /client.")
}
